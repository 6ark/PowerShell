# Identify directory of reports
$FileServer = "<\\fileserver>"
$ReportDirectory = "$FileServer\<Directory>\Get-Software"

# Identify locations of reports
$Transcript = "$ReportDirectory\_Transcript.txt"
$Computers = (Get-Content "$ReportDirectory\00-Computers.txt")
$Connection = "$ReportDirectory\01-Connection.txt"
$Connected = "$ReportDirectory\02-Connected.txt"
$Disconnected = "$ReportDirectory\03-Disconnected.txt"
$Report = "$ReportDirectory\04-Software.csv"

# Check if directory and reports exist.
$TestReportsDirectory = Test-Path -Path $ReportDirectory
$TestReports = Test-Path -Path $Connection, $Connected, $Disconnected, $Report

# Set invoked command to variable

Function Get-Installed_Software{
    Function Create-Reports{
        If($TestReportsDirectory){
            If($TestReports){
                Write-Host -ForegroundColor Yellow "Overwriting reports..." 
                New-Item -ItemType "File" -Path $Connection, $Connected, $Disconnected, $Report -Force
                Write-Host -ForegroundColor Yellow "Testing remote connection..."
                Get-Software
            }
            Else{
               Write-Host -ForegroundColor Yellow "Creating reports..."
               New-Item -ItemType "File" -Path $Connection, $Connected, $Disconnected, $Report -Force
               Create-Reports
            }
        }
        Else{
            Write-Host -ForegroundColor Yellow "Creating directory..."
            New-Item -ItemType "Directory" -Path $ReportDirectory -Force
            Create-Reports
        }
    }
    Function Get-Software{
        Foreach ($Computer in $Computers){
        $TestConnection = Test-Connection -ComputerName $Computer -Count 1 -Delay 1
            If($TestConnection){
                Write-Host -ForegroundColor Green "Successful connection to $Computer."
                Add-Content -Value "S: $Computer" -Path $Connected, $Connection
                Write-Host -ForegroundColor Yellow "Retrieving software for $Computer..." 
                Invoke-Command -ComputerName $Computer -ScriptBlock {
                    $Array = @()
                    $Installed_Software = (Get-ItemProperty -Path "HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*", "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\*")

                    Foreach($Software in $Installed_Software){
                        If ($Software.DisplayName -ne "" -and $Software.DisplayName -notcontains "Update for" -and $Software.VersionMajor -ge "0"){
                            $Array += New-Object psobject -Property @{"Computer" = $env:COMPUTERNAME; "DisplayName" = $Software.DisplayName; "VersionMajor" = $Software.VersionMajor}
                        }
                    }
                    $Array | Select-Object "Computer", "DisplayName", "VersionMajor" | Sort-Object -Property DisplayName -Descending
                } | Select-Object * -ExcludeProperty PSSession, Runtime #### I'm not at work right now but you can omit those colums with exclude property | Export-Csv $Report -NoTypeInformation -Append
            }
            Else{
                Write-Host -ForegroundColor Red "Failed connection to $Computer."
                Add-Content -Value "F: $Computer" -Path $Disconnected, $Connection
            }
        }
    }
Create-Reports
Write-Host -ForegroundColor DarkYellow `
"Don't forget to check for computers that could not be reached; 
$Disconnected"

Write-Host -ForegroundColor Green "Opening report..."
Start-Process $Report
}

Start-Transcript -Path $Transcript -Force
Get-Installed_Software
Stop-Transcript
